// Importing required npm packages
const mongoose = require('mongoose');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

// Importing custom modules
const processVar = require('../config/nodemon.json');

// Defining the user Schema
const userSchema =  new mongoose.Schema({
    name: {
        type: String,
        trim: true,
        required: true,
    },
    email: {
        type: String,
        trim: true,
        required: true,
        unique: true,
        match: /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
    },
    password: {
        type: String,
        trim: true,
        minLength: 6,
        required: true
    },
    tokens: [
        {
            token: {
                type: String,
                required: true
            }
        }
    ]
}, {
    timestamps: true
});


/**
 * Encypring the user password using the hash method 
 * provided by 'bcryptjs' npm package
 */
userSchema.pre('save', async function (next) {
    const user = this;
    if (user.isModified('password')) {
        user.password = await bcrypt.hash(user.password, 8);
    }
    next();
});


/**
 * 
 * user with given email and password
 * else return appropriate error
 */
userSchema.statics.findByEmailAndPassword = async (email, passwd) => {
    const user = await User.findOne({ email });
    if (!user) {
        throw new Error("No user with the given email!");
    }

    const isPasswdMatching = await bcrypt.compare(passwd, user.password);
    if (!isPasswdMatching) {
        throw new Error("Please enter the correct password!");
    }

    return user;
};


/**
 * Method to generate auth tokens for specified user
 * token generated by vwt package
 */
userSchema.methods.generateAuthTokens = async function () {
    const user = this;
    const token = jwt.sign({ _id: user._id.toString() }, processVar.env.JWT_KEY);

    user.tokens = user.tokens.concat({ token });
    await user.save();

    return token;
};

const User = mongoose.model('User', userSchema);

// Expporting the user model
module.exports = User;
